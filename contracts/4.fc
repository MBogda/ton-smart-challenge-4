{-
  TASK 4 - Caesar Cipher
  Implement a Caesar cipher encryption and decryption functions.
  The input is a string (https://docs.ton.org/develop/smart-contracts/guidelines/internal-messages#simple-message-with-comment)
  where the text is encrypted in a cell (after 32bit 00000000 prefix flag), the algorithm rotates the characters and the last ASCII
  character should go to the beginning. Return new text encoded in cell.
-}

() recv_internal() {
}

;; testable
(cell) caesar_cipher_encrypt(int shift, cell text) method_id {
  slice text_sl = text.begin_parse();
  text_sl~load_uint(32);
  builder answer_bd = begin_cell()
          .store_uint(0, 32);
  tuple answer_builders = null();

  while (~ text_sl.slice_empty?()) {
    if (text_sl.slice_data_empty?()) {
      text_sl = text_sl~load_ref().begin_parse();
      answer_builders = cons(answer_bd, answer_builders);
      answer_bd = begin_cell();
    }
    int symbol = text_sl~load_uint(8);
    if ((symbol >= 65) & (symbol <= 90)) {
      symbol = (symbol - 65 + shift) % 26 + 65;
    } else {
      if ((symbol >= 97) & (symbol <= 122)) {
        symbol = (symbol - 97 + shift) % 26 + 97;
      }
    }
    answer_bd~store_uint(symbol, 8);
  }

  while (~ answer_builders.null?()) {
    cell last_answer = answer_bd.end_cell();
    (answer_bd, answer_builders) = uncons(answer_builders);
    answer_bd.store_ref(last_answer);
  }

  return answer_bd.end_cell();
}

;; testable
(cell) caesar_cipher_decrypt(int shift, cell text) method_id {
  slice text_sl = text.begin_parse();
  text_sl~load_uint(32);
  builder answer_bd = begin_cell()
          .store_uint(0, 32);
  tuple answer_builders = null();

  while (~ text_sl.slice_empty?()) {
    if (text_sl.slice_data_empty?()) {
      text_sl = text_sl~load_ref().begin_parse();
      answer_builders = cons(answer_bd, answer_builders);
      answer_bd = begin_cell();
    }
    int symbol = text_sl~load_uint(8);
    if ((symbol >= 65) & (symbol <= 90)) {
      symbol = (symbol - 65 - shift) % 26 + 65;
    } else {
      if ((symbol >= 97) & (symbol <= 122)) {
        symbol = (symbol - 97 - shift) % 26 + 97;
      }
    }
    answer_bd~store_uint(symbol, 8);
  }

  while (~ answer_builders.null?()) {
    cell last_answer = answer_bd.end_cell();
    (answer_bd, answer_builders) = uncons(answer_builders);
    answer_bd.store_ref(last_answer);
  }

  return answer_bd.end_cell();
}
